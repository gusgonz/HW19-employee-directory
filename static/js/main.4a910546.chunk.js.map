{"version":3,"sources":["components/Header.js","components/Row.js","utils/getEmployees.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","key","role","aria-haspopup","aria-labelledby","currentSort","name","onClick","handleSort","clearSort","onChange","handleSearch","placeholder","Row","picture","alt","src","email","number","country","getEmployees","axios","get","employeeSort","employees","sort","inv","sortedEmployees","reverse","a","b","localeCompare","Container","state","currentEmp","allEmp","event","target","console","log","setState","preventDefault","searchTerm","value","toUpperCase","newState","filter","employee","includes","then","response","data","results","map","result","first","last","location","thumbnail","cell","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a910546.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n    return (<div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <h1 className=\"navbar-brand\" href=\"#\">Employee Directory</h1>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item dropdown\" key=\"keylee\" >\n                        <p className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Sort By\n                            </p>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <button className={(props.currentSort === \"name\") ? \"dropdown-item active\" : \"dropdown-item\"} name=\"name\" onClick={props.handleSort}>Name</button>\n                            <button className={(props.currentSort === \"email\") ? \"dropdown-item active\" : \"dropdown-item\"} name=\"email\" onClick={props.handleSort}>Email</button>\n                            <button className={(props.currentSort === \"country\") ? \"dropdown-item active\" : \"dropdown-item\"} name=\"country\" onClick={props.handleSort}>Country</button>\n                        </div>\n                    </li>\n                    {\n                        (props.currentSort === \"\") ?\n                            \"\"\n                            :\n                            (<li className=\"nav-item\">\n                                <button className=\"nav-link primary\" onClick={props.clearSort}>Clear Sort</button>\n                            </li>)\n                    }\n\n                </ul>\n\n                <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"search\"\n                    onChange={props.handleSearch}\n                    placeholder=\"Search\"\n                    aria-label=\"Search\" />\n            </div>\n        </nav>\n    </div>\n\n    );\n};\n\nexport default Header;","import React from \"react\";\n\nfunction Row(props) {\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n                {props.picture ? <img alt=\"Employee\" src={props.picture} /> : <h2>Picture</h2>}\n            </div>\n            <div className=\"col\">\n                {props.name ? <p>{props.name}</p> : <h2>Name</h2>}\n            </div>\n            <div className=\"col\">\n                {props.email ? <p>{props.email}</p> : <h2>Email</h2>}\n            </div>\n            <div className=\"col\">\n                {props.number ? <p>{props.number}</p> : <h2>Number</h2>}\n            </div>\n            <div className=\"col\">\n                {props.country ? <p>{props.country}</p> : <h2>Country</h2>}\n            </div>\n        </div>\n    );\n};\n\nexport default Row;","import axios from \"axios\";\n\nfunction getEmployees() {\n    return axios.get(\"https://randomuser.me/api/?results=30\");\n};\n\nexport default getEmployees;","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Row from \"./Row\";\nimport getEmployees from \"../utils/getEmployees\";\n\nclass Container extends Component {\n    state = {\n        currentEmp: [],\n        allEmp: [],\n        currentSort: \"\"\n    };\n\n    componentDidMount() {\n        getEmployees().then(response => {\n            console.log(response);\n            let employees = response.data.results.map(result => {\n                return {\n                    name: `${result.name.first} ${result.name.last}`,\n                    email: result.email,\n                    country: result.location.country,\n                    picture: result.picture.thumbnail,\n                    number: result.cell\n                }\n            });\n            this.setState({ ...this.state, allEmp: employees, currentEmp: employees });\n        });\n    };\n\n    handleSort = event => {\n        let sort = event.target.name;\n        let sortedEmployees = [];\n        console.log(sort);\n        if (this.state.currentSort === sort) {\n            sortedEmployees = employeeSort(this.state.currentEmp, sort, true);\n        } else {\n            sortedEmployees = employeeSort(this.state.currentEmp, sort);\n        }\n\n        this.setState({ ...this.state, currentEmp: sortedEmployees, currentSort: sort });\n    };\n\n    handleSearch = event => {\n        event.preventDefault();\n        let searchTerm = event.target.value.toUpperCase();\n        let newState = this.state.allEmp.filter(employee => {\n            return (employee.name.toUpperCase().includes(searchTerm) || employee.country.toUpperCase().includes(searchTerm) || employee.number.includes(searchTerm) || employee.email.toUpperCase().includes(searchTerm));\n        });\n        this.setState({ ...this.state, currentEmp: newState });\n    };\n\n    clearSort = event => {\n        this.setState({ ...this.state, currentSort: \"\", currentEmp: this.state.allEmp });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Header handleSearch={this.handleSearch} handleSort={this.handleSort} currentSort={this.state.currentSort} clearSort={this.clearSort} />\n                <div className=\"container-fluid\">\n                    <Row name=\"\" picture=\"\" email=\"\" country=\"\" number=\"\" />\n                    {createRows(this.state.currentEmp)};\n                </div>\n            </div>\n        );\n    };\n};\n\nfunction createRows(employees) {\n    return employees.map(employee => {\n        return <Row name={employee.name} picture={employee.picture} email={employee.email} country={employee.country} number={employee.number} />;\n    });\n};\n\nfunction employeeSort(employees, sort, inv = false) {\n    let sortedEmployees = [];\n\n    if (inv) {\n        sortedEmployees = employees.reverse();\n    } else {\n        switch (sort) {\n            case \"name\":\n                sortedEmployees = employees.sort((a, b) => a.name.localeCompare(b.name));\n                break;\n\n            case \"email\":\n                sortedEmployees = employees.sort((a, b) => a.email.localeCompare(b.email));\n                break;\n\n            case \"country\":\n                sortedEmployees = employees.sort((a, b) => a.country.localeCompare(b.country));\n                break;\n            default:\n                sortedEmployees = employees;\n        }\n    }\n    return sortedEmployees;\n};\n\n\nexport default Container;","import React from 'react';\nimport './App.css';\nimport Conatainer from \"./components/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Conatainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}